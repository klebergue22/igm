 package ec.gob.prueba.prueba_maven.web;

import ec.gob.prueba.prueba_maven.modelo.Contratacion;
import ec.gob.prueba.prueba_maven.modelo.DatEmpleado;
import ec.gob.prueba.prueba_maven.modelo.enums.EstadoContrato;
import ec.gob.prueba.prueba_maven.modelo.enums.TipoContrato;
import ec.gob.prueba.prueba_maven.servicio.ContratacionService;

import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;

import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.enterprise.context.SessionScoped;  // CAMBIADO
import javax.inject.Named;
import javax.faces.context.FacesContext;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.primefaces.PrimeFaces;

@Named("contratacionController")
@SessionScoped  // CAMBIADO de @ViewScoped
@Slf4j
public class ContratacionController implements Serializable {

    private static final long serialVersionUID = 1L;

    @EJB
    private ContratacionService service;

    // Getters y Setters EXPLÍCITOS (sin @Getter @Setter de Lombok)
    private BigDecimal filtroNoPersona;
    private List<Contratacion> lista;
    private Contratacion seleccionado;
    private int page = 0;
    private int size = 20;
    private String nombreEmpleado = ""; // INICIALIZAR para evitar null

    @PostConstruct
    public void init() {
        System.out.println("========================================");
        System.out.println("INIT ContratacionController - " + System.currentTimeMillis());
        System.out.println("Service: " + (service != null ? "OK" : "NULL"));
        System.out.println("========================================");

        lista = Collections.emptyList();
        seleccionado = null;
        log.info("ContratacionController inicializado");
    }

    public void ping() {
        System.out.println("========================================");
        System.out.println("PING EJECUTADO - " + new Date());
        System.out.println("========================================");

        FacesContext.getCurrentInstance()
                .addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO,
                        "Ping OK - " + new Date(), null));
    }

    /* ===================== BÚSQUEDA ===================== */
    public void buscar() {
        System.out.println("========================================");
        System.out.println("BUSCAR EJECUTADO!!!");
        System.out.println("filtroNoPersona = " + filtroNoPersona);
        System.out.println("service = " + (service != null ? "OK" : "NULL"));
        System.out.println("========================================");

        if (filtroNoPersona == null) {
            msgWarn("Ingrese No. Persona");
            lista = Collections.emptyList();
            return;
        }

        try {
            if (!service.existePersona(filtroNoPersona)) {
                msgWarn("El No. Persona " + filtroNoPersona + " no existe en Datos Personales.");
                lista = Collections.emptyList();
                return;
            }

            // Trae TODOS los contratos
            lista = service.porPersonaTodos(filtroNoPersona);

            System.out.println("Contratos encontrados: " + (lista == null ? 0 : lista.size()));

            msgInfo("Contratos encontrados: " + (lista == null ? 0 : lista.size()));

            if (lista == null || lista.isEmpty()) {
                DatEmpleado de = service.obtenerEmpleado(filtroNoPersona);
                nombreEmpleado = (de != null && de.getNombreC() != null) ? de.getNombreC() : "(sin nombre)";
                PrimeFaces.current().ajax().update("layoutForm:dlgCrear");
                PrimeFaces.current().executeScript("PF('dlgCrear').show()");
            }
        } catch (Exception e) {
            System.err.println("ERROR en buscar: " + e.getMessage());
            e.printStackTrace();
            msgError("Error al buscar: " + e.getMessage());
        }
    }

    /* ============== CREACIÓN ============== */
    public void crearNuevoDesdeDialogo() {
        prepararNuevoYMostrar();
        PrimeFaces.current().executeScript("PF('dlgCrear').hide()");
    }

    public void nuevoDesdeBoton() {
        // 1) Validar que filtroNoPersona tenga valor
        if (filtroNoPersona == null) {
            msgWarn("Ingrese No. Persona");
            return;
        }

        // 2) Validar que la persona exista
        if (!service.existePersona(filtroNoPersona)) {
            msgWarn("El No. Persona " + filtroNoPersona + " no existe en Datos Personales.");
            return;
        }

        // 3) ⭐ NUEVA VALIDACIÓN: Verificar contrato vigente sin fecha de salida
        if (service.existeContratoVigenteSinSalida(filtroNoPersona)) {
            msgError("Contrato Vigente Activo",
                    "Ya existe un contrato VIGENTE sin fecha de salida para el No. Persona " + filtroNoPersona
                    + ". Complete o cierre el contrato actual antes de crear uno nuevo.");
            return;
        }

        // 4) Todo OK → preparar y mostrar diálogo
        prepararNuevoYMostrar();
    }

// Método auxiliar para mensajes de error (si no lo tienes)
    private void msgError(String titulo, String detalle) {
        FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, titulo, detalle);
        FacesContext.getCurrentInstance().addMessage(null, msg);
    }

    private void prepararNuevoYMostrar() {
        try {
            BigDecimal noCont = service.siguienteNoCont(filtroNoPersona);

            seleccionado = new Contratacion();
            seleccionado.setNoPersona(filtroNoPersona);
            seleccionado.setNoCont(noCont);
            seleccionado.setEstado(EstadoContrato.VIGENTE);
            seleccionado.setFeContrato(new Date());

            PrimeFaces.current().ajax().update("layoutForm:dlg");
            PrimeFaces.current().executeScript("PF('dlgCont').show()");
        } catch (Exception e) {
            log.error("Error preparando nuevo contrato", e);
            msgError("Error preparando nuevo contrato: " + e.getMessage());
        }
    }

    /* ===================== EDICIÓN ===================== */
    public void editar(Contratacion fila) {
        System.out.println("========================================");
        System.out.println("EDITAR EJECUTADO - " + fila.getNoPersona() + "-" + fila.getNoCont());
        System.out.println("========================================");

        if (fila == null) {
            msgWarn("No se encontró el registro a editar.");
            return;
        }
        seleccionado = service.porId(fila.getNoPersona(), fila.getNoCont());
        if (seleccionado == null) {
            msgWarn("El registro ya no existe en BD.");
            return;
        }
    }

    /* ===================== GUARDAR ===================== */
    public void guardar() {
        try {
            if (seleccionado == null) {
                msgWarn("No hay datos para guardar");
                return;
            }
            service.guardarNuevo(seleccionado); // <--- persistir de verdad
            msgInfo("Guardado exitosamente");
            buscar();
            seleccionado = null;
            PrimeFaces.current().executeScript("PF('dlgCont').hide()");
        } catch (Exception e) {
            log.error("Error al guardar", e);
            msgError("Error al guardar: " + e.getMessage());
        }
    }


    /* ===================== GETTERS Y SETTERS ===================== */
    public BigDecimal getFiltroNoPersona() {
        return filtroNoPersona;
    }

    public void setFiltroNoPersona(BigDecimal filtroNoPersona) {
        System.out.println("setFiltroNoPersona llamado con: " + filtroNoPersona);
        this.filtroNoPersona = filtroNoPersona;
    }

    public List<Contratacion> getLista() {
        return lista;
    }

    public void setLista(List<Contratacion> lista) {
        this.lista = lista;
    }

    public Contratacion getSeleccionado() {
        return seleccionado;
    }

    public void setSeleccionado(Contratacion seleccionado) {
        this.seleccionado = seleccionado;
    }

    public String getNombreEmpleado() {
        return nombreEmpleado;
    }

    public void setNombreEmpleado(String nombreEmpleado) {
        this.nombreEmpleado = nombreEmpleado;
    }

    /* ===================== SOPORTE VISTA ===================== */
    public EstadoContrato[] getEstadosEnum() {
        return EstadoContrato.values();
    }

    public TipoContrato[] getTiposContratoEnum() {
        return TipoContrato.values();
    }

    public boolean esVigente(Contratacion c) {
        return c != null && c.getEstado() == EstadoContrato.VIGENTE;
    }

    /* ===================== MENSAJERÍA ===================== */
    private void msg(FacesMessage.Severity s, String m) {
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(s, m, null));
    }

    private void msgWarn(String m) {
        msg(FacesMessage.SEVERITY_WARN, m);
    }

    private void msgInfo(String m) {
        msg(FacesMessage.SEVERITY_INFO, m);
    }

    private void msgError(String m) {
        msg(FacesMessage.SEVERITY_ERROR, m);
    }
}
